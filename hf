#!/usr/bin/env ruby

VERSION = '1.1.12'.freeze
ROOT_DIR = `ls -l /usr/bin/`.split("\n").detect { |symlink| symlink.include? 'git-hotfix' }.scan(/\->\s(.*)\/hf/)[0][0]
PROJECT_DIR = `pwd`.delete('\n').freeze

# p ROOT_DIR
# p PROJECT_DIR

require 'yaml'
Dir[ROOT_DIR + '/lib/*.rb'].each { |file| require file }
Dir[ROOT_DIR + '/config/*.rb'].each { |file| require file }
Dir[ROOT_DIR + '/actions/*.rb'].each { |file| require file }

def help_action
  print "\nVersion: #{VERSION}".underlined + "\n\n"
  print 'Examples:'.bold + "\n\n"
  print 'hf 777' + "\n"
  print 'hf save "its a comment"' + "\n"
  print 'hf save master develop "its a comment"' + "\n"
  print 'hf deploy master develop "its a comment"' + "\n"
  print 'hf delete-merged' + "\n"
  print 'hf config' + "\n"
  print 'hf self-update [VERSION]' + "\n"
  print 'hf sync' + "\n"
  print 'hf reset' + "\n"
  print 'hf get' + "\n"
  print 'hf st' + "\n"
  print "\n\n"
  print 'Options: '.bold + "\n\n"
  print 'No push: (--no-push|--local) prevents pushes to remote' + "\n"
  print 'hf save master "its a comment" --local' + "\n"
  print "\n"
end

def run_actions
  args = ARGV.select { |arg| arg[0] != '-' || arg.include?(' ') }
  flags = ARGV.select { |arg| arg[0] == '-' && !arg.include?(' ') }
  options = {}
  options[:no_push] = flags.include?('--no-push') || flags.include?('--local')
  options[:always_commit] = flags.include?('--ac') || flags.include?('--always-commit')

  return SaveAction.call(args, options) if args[0] == 'save'
  return DeployAction.call(args, options) if args[0] == 'deploy'
  return ConfigAction.call(args, options) if args[0] == 'config'
  return SyncAction.call(args, options) if args[0] == 'sync'
  return DeleteMergedAction.call(args, options) if args[0] == 'delete-merged'
  return ResetAction.call(args, options) if args[0] == 'reset'
  return GetAction.call(args, options) if args[0] == 'get'
  return StAction.call(args, options) if args[0] == 'st'
  return StealAction.call(args, options) if args[0] == 'steal'

  if args[0] == 'self-update'
    self_update_action
    exit
  end

  return CheckoutAction.call(args, options) if args.count == 1

  if args.count.zero?
    help_action
    exit
  end
end

def self_update_action
  checkout = ARGV[1] || :master
  dir = `ls -l /usr/bin/`.split("\n").detect { |symlink| symlink.include? 'git-hotfix' }
  dir = dir.scan(/\->\s(.*)\/hf/)[0][0]
  `cd #{dir} && git checkout #{checkout} && git pull origin #{checkout}`
end

def main
  ExecCli.call(run_actions)
end

main
